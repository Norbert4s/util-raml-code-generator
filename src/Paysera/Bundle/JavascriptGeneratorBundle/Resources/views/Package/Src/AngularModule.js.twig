import angular from 'angular';
import { TokenProvider, Scope } from '@paysera/http-client-common';

{% for typeConfig in get_all_used_types(api) %}
{% if typeConfig.importString is not null %}
import {{ typeConfig.importString|raw }};
{% else %}
import {{ typeConfig.typeName|extract_type_name }} from './entity/{{ typeConfig.typeName|extract_type_name }}';
{% endif %}
{% endfor %}

{% import _self as macros %}
{% macro render_wrap_q(resource, api) %}
{% for subResource in resource.resources -%}
{{ _self.render_wrap_q(subResource, api) -}}
{% endfor %}
{% for method in resource.methods -%}
{% include '@PayseraJavascriptGenerator/Package/Src/Service/Method/wrap_q.js.twig' with {
    'resource': resource,
    'method': method,
    'api': api
} only -%}
{% endfor %}
{% endmacro -%}

import DateFactory from './service/DateFactory';
import { create{{ js_get_client_name(api) }} } from './service/createClient';
import {{ js_get_client_name(api) }} from './service/{{ js_get_client_name(api) }}';

export {
{% for typeConfig in get_all_used_types(api) %}
    {{ typeConfig.typeName|extract_type_name }},
{% endfor %}
    DateFactory,
    create{{ js_get_client_name(api) }},
    {{ js_get_client_name(api) }},
};

class AngularClientFactory {
    constructor($q) {
        this.$q = $q;
    }

    /**
     * @param {object|null} config
     * @returns {{ ('{' ~ js_get_client_name(api) ~ '}')|raw }}
     */
    getClient(config = { baseURL: undefined, middleware: undefined }) {
        return this.wrapQ(create{{ js_get_client_name(api) }}(config));
    }

    /**
     * @param {{ ('{' ~ js_get_client_name(api) ~ '}')|raw }} client
     * @returns {{ ('{' ~ js_get_client_name(api) ~ '}')|raw }}
     */
    /* eslint no-param-reassign: ["error", { "props": true, "ignorePropertyModificationsFor": ["client"] }] */
    wrapQ(client) {
{% for resource in api.ramlDefinition.resources -%}
    {{ macros.render_wrap_q(resource, api) -}}
{% endfor %}

        return client;
    }
}

AngularClientFactory.$inject = ['$q'];

export default angular
    .module('{{ js_get_angular_module_name(vendor_prefix, api.name) }}', [])
    .service('{{ js_get_angular_client_factory_name(vendor_prefix, api.name) }}', AngularClientFactory)
    .name;
